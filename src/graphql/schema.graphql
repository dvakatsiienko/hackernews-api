scalar Date

type Query {
    feed(filter: String, skip: Int, take: Int): Feed!
    post(id: ID!): Post!
    user(id: ID!): User!
    authenticate(token: String!): Boolean
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload

    createPost(url: String!, description: String!): Post!
    updatePost(id: ID!, url: String!, description: String!): Post!
    deletePost(id: ID!): Boolean!

    vote(postId: ID!): Vote!
    unVote(postId: ID!): Vote!
}

type Subscription {
    postCreated: Post!
    postVoted: Vote!
}

type AuthPayload {
    token: String
    user: User!
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post!]!
    votes: [Vote!]!
}

type Feed {
    posts: [Post!]!
    count: Int!
}

type Post {
    id: ID!
    description: String!
    url: String!
    postedBy: User!
    votes: [Vote!]!
    createdAt: Date!
    isVotedByMe: Boolean!
}

enum SORT {
    asc
    desc
}

type Vote {
    id: ID!
    post: Post!
    user: User!
}
